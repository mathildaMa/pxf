<?xml version="1.0" encoding="UTF-8"?>

<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<!--
    PXF pre-packaged profiles definition file.
    It's not recommended to add new profiles here.
    For adding new custom profiles please edit pxf-profiles.xml
-->
<profiles>
    <profile>
        <name>HBase</name>
        <description>This profile is suitable for using when connecting to an HBase data store
            engine
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hbase.HBaseDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hbase.HBaseAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hbase.HBaseResolver</resolver>
        </plugins>
    </profile>
    <profile>
        <name>Hive</name>
        <description>
            This profile is suitable for using when connecting to Hive. Supports GPDBWritable output
            format, as specified in FORMAT header parameter. It auto-detects actual file storage
            format and uses an optimized profile (HiveRC, HiveText, HiveORC) if applicable.
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hive.HiveDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hive.HiveAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hive.HiveResolver</resolver>
            <metadata>org.greenplum.pxf.plugins.hive.HiveMetadataFetcher</metadata>
            <outputFormat>org.greenplum.pxf.api.io.GPDBWritable</outputFormat>
        </plugins>
    </profile>
    <profile>
        <name>HiveRC</name>
        <description>This profile is suitable only for Hive tables stored in RC files and serialized
            with either the ColumnarSerDe or the LazyBinaryColumnarSerDe. It is much faster than the
            general purpose Hive profile. DELIMITER parameter is mandatory. Supports both
            GPDBWritable and TEXT output formats, as specified in FORMAT header parameter. Primary
            optimized for TEXT output format.
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hive.HiveInputFormatFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hive.HiveRCFileAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hive.HiveColumnarSerdeResolver</resolver>
            <metadata>org.greenplum.pxf.plugins.hive.HiveMetadataFetcher</metadata>
            <outputFormat>org.greenplum.pxf.api.io.Text</outputFormat>
        </plugins>
    </profile>
    <profile>
        <name>HiveText</name>
        <description>This profile is suitable only for Hive tables stored as Text files. It is much
            faster than the general purpose Hive profile. DELIMITER parameter is mandatory. Supports
            both GPDBWritable and TEXT output formats, as specified in FORMAT header parameter.
            Primary optimized for TEXT output format.
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hive.HiveInputFormatFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hive.HiveLineBreakAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hive.HiveStringPassResolver</resolver>
            <metadata>org.greenplum.pxf.plugins.hive.HiveMetadataFetcher</metadata>
            <outputFormat>org.greenplum.pxf.api.io.Text</outputFormat>
        </plugins>
    </profile>
    <profile>
        <name>HiveORC</name>
        <description>This profile is suitable only for Hive tables stored in ORC files and
            serialized with either the ColumnarSerDe or the LazyBinaryColumnarSerDe. It is much
            faster than the general purpose Hive profile. Supports GPDBWritable output format, as
            specified in FORMAT header parameter.
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hive.HiveInputFormatFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hive.HiveORCAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hive.HiveORCSerdeResolver</resolver>
            <metadata>org.greenplum.pxf.plugins.hive.HiveMetadataFetcher</metadata>
            <outputFormat>org.greenplum.pxf.api.io.GPDBWritable</outputFormat>
        </plugins>
    </profile>
    <profile>
        <name>HiveVectorizedORC</name>
        <description>This profile is same as HiveORC profile, but operates on batches of rows
            instead of one row at a time, leading to faster reading and resolution phases.
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hive.HiveInputFormatFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hive.HiveORCVectorizedAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hive.HiveORCVectorizedResolver</resolver>
            <metadata>org.greenplum.pxf.plugins.hive.HiveMetadataFetcher</metadata>
            <outputFormat>org.greenplum.pxf.api.io.GPDBWritable</outputFormat>
        </plugins>
    </profile>
    <profile>
        <name>HdfsTextSimple</name>
        <description>This profile is suitable for using when reading delimited single line records
            from plain text files on HDFS.
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.LineBreakAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.StringPassResolver</resolver>
        </plugins>
    </profile>
    <profile>
        <name>HdfsTextMulti</name>
        <description>This profile is suitable for using when reading delimited single or multi line
            records (with quoted linefeeds) from plain text files on HDFS. It is not splittable (non
            parallel) and slower than HdfsTextSimple.
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsFileFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.QuotedLineBreakAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.StringPassResolver</resolver>
        </plugins>
    </profile>
    <profile>
        <name>SequenceWritable</name>
        <description>
            Profile for accessing Sequence files serialized with a custom Writable class
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.SequenceFileAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.WritableResolver</resolver>
        </plugins>
    </profile>
    <profile>
        <name>SequenceText</name>
        <description>
            Profile for accessing Sequence files serialized with a custom Writable class
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.SequenceFileAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.StringPassResolver</resolver>
        </plugins>
    </profile>
    <profile>
        <name>GemFireXD</name>
        <description>This profile is suitable for using when connecting to GemFireXD</description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.gemfirexd.GemFireXDFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.gemfirexd.GemFireXDAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.gemfirexd.GemFireXDResolver</resolver>
        </plugins>
    </profile>
    <profile>
        <name>Json</name>
        <description>
            Access JSON data either as:
            * one JSON record per line (default)
            * or multiline JSON records with an IDENTIFIER parameter indicating a member name used
            to determine the encapsulating json object to return
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.json.JsonAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.json.JsonResolver</resolver>
        </plugins>
    </profile>
    <profile>
        <name>Jdbc</name>
        <description>A profile for reading and writing data via JDBC</description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.jdbc.JdbcPartitionFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.jdbc.JdbcAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.jdbc.JdbcResolver</resolver>
        </plugins>
        <optionMappings>
            <mapping option="jdbc_driver" property="jdbc.driver"/>
            <mapping option="db_url" property="jdbc.url"/>
            <mapping option="user" property="jdbc.user"/>
            <mapping option="pass" property="jdbc.password"/>
            <mapping option="batch_size" property="jdbc.statement.batchSize"/>
            <mapping option="fetch_size" property="jdbc.statement.fetchSize"/>
            <mapping option="query_timeout" property="jdbc.statement.queryTimeout"/>
        </optionMappings>
    </profile>
    <profile>
        <name>Parquet</name>
        <description>A profile for reading and writing Parquet data from HDFS</description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.ParquetFileAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.ParquetResolver</resolver>
        </plugins>
    </profile>
    <!-- TEXT PROFILES -->
    <profile>
        <name>hdfs:text</name>
        <description>This profile is suitable for using when reading delimited single line records
            from plain text, tab-delimited, files on HDFS.
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.LineBreakAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.StringPassResolver</resolver>
        </plugins>
    </profile>
    <profile>
        <name>hdfs:csv</name>
        <description>This profile is suitable for using when reading delimited single line records
            from plain text CSV files on HDFS.
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.LineBreakAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.StringPassResolver</resolver>
        </plugins>
    </profile>
    <profile>
        <name>hdfs:text:multi</name>
        <description>This profile is suitable for using when reading delimited single or multi line
            records (with quoted linefeeds) from plain text files on HDFS. It is not splittable (non
            parallel) and slower than HdfsTextSimple.
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsFileFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.QuotedLineBreakAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.StringPassResolver</resolver>
        </plugins>
    </profile>
    <profile>
        <name>s3:text</name>
        <description>This profile is suitable for using when reading delimited single line records
            from plain text, tab-delimited, files on S3
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.LineBreakAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.StringPassResolver</resolver>
        </plugins>
        <protocol>s3a</protocol>
        <handler>org.greenplum.pxf.plugins.s3.S3ProtocolHandler</handler>
        <optionMappings>
            <mapping option="accesskey" property="fs.s3a.access.key"/>
            <mapping option="secretkey" property="fs.s3a.secret.key"/>
        </optionMappings>
    </profile>
    <profile>
        <name>s3:csv</name>
        <description>This profile is suitable for using when reading delimited single line records
            from plain text CSV files on S3
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.LineBreakAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.StringPassResolver</resolver>
        </plugins>
        <protocol>s3a</protocol>
        <handler>org.greenplum.pxf.plugins.s3.S3ProtocolHandler</handler>
        <optionMappings>
            <mapping option="accesskey" property="fs.s3a.access.key"/>
            <mapping option="secretkey" property="fs.s3a.secret.key"/>
        </optionMappings>
    </profile>
    <profile>
        <name>s3:text:multi</name>
        <description>This profile is suitable for using when reading delimited single or multi line
            records (with quoted linefeeds) from plain text files on HDFS. It is not splittable (non
            parallel) and slower than HdfsTextSimple.
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsFileFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.QuotedLineBreakAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.StringPassResolver</resolver>
        </plugins>
        <protocol>s3a</protocol>
        <optionMappings>
            <mapping option="accesskey" property="fs.s3a.access.key"/>
            <mapping option="secretkey" property="fs.s3a.secret.key"/>
        </optionMappings>
    </profile>

    <profile>
        <name>adl:text</name>
        <description>This profile is suitable for using when reading delimited single line records
            from plain text, tab-delimited, files on Azure Data Lake
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.LineBreakAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.StringPassResolver</resolver>
        </plugins>
        <protocol>adl</protocol>
    </profile>
    <profile>
        <name>adl:csv</name>
        <description>This profile is suitable for using when reading delimited single line records
            from plain text CSV files on Azure Data Lake
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.LineBreakAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.StringPassResolver</resolver>
        </plugins>
        <protocol>adl</protocol>
    </profile>
    <profile>
        <name>adl:text:multi</name>
        <description>This profile is suitable for using when reading delimited single or multi line
            records (with quoted linefeeds) from plain text files on HDFS. It is not splittable (non
            parallel) and slower than HdfsTextSimple.
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsFileFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.QuotedLineBreakAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.StringPassResolver</resolver>
        </plugins>
        <protocol>adl</protocol>
    </profile>
    <profile>
        <name>gs:text</name>
        <description>This profile is suitable for using when reading delimited single line records
            from plain text, tab-delimited, files on Azure Data Lake
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.LineBreakAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.StringPassResolver</resolver>
        </plugins>
        <protocol>gs</protocol>
    </profile>
    <profile>
        <name>gs:csv</name>
        <description>This profile is suitable for using when reading delimited single line records
            from plain text CSV files on Azure Data Lake
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.LineBreakAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.StringPassResolver</resolver>
        </plugins>
        <protocol>gs</protocol>
    </profile>
    <profile>
        <name>gs:text:multi</name>
        <description>This profile is suitable for using when reading delimited single or multi line
            records (with quoted linefeeds) from plain text files on HDFS. It is not splittable (non
            parallel) and slower than HdfsTextSimple.
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsFileFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.QuotedLineBreakAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.StringPassResolver</resolver>
        </plugins>
        <protocol>gs</protocol>
    </profile>
    <!-- PARQUET PROFILES -->
    <profile>
        <name>hdfs:parquet</name>
        <description>A profile for reading and writing Parquet data from HDFS</description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.ParquetFileAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.ParquetResolver</resolver>
        </plugins>
    </profile>
    <profile>
        <name>s3:parquet</name>
        <description>A profile for reading and writing Parquet data from S3</description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.ParquetFileAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.ParquetResolver</resolver>
        </plugins>
        <protocol>s3a</protocol>
        <handler>org.greenplum.pxf.plugins.s3.S3ProtocolHandler</handler>
        <optionMappings>
            <mapping option="accesskey" property="fs.s3a.access.key"/>
            <mapping option="secretkey" property="fs.s3a.secret.key"/>
        </optionMappings>
    </profile>
    <profile>
        <name>adl:parquet</name>
        <description>A profile for reading and writing Parquet data from Azure Data Lake
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.ParquetFileAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.ParquetResolver</resolver>
        </plugins>
        <protocol>adl</protocol>
    </profile>
    <profile>
        <name>gs:parquet</name>
        <description>A profile for reading and writing Parquet data from Google Cloud Storage
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.ParquetFileAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.ParquetResolver</resolver>
        </plugins>
        <protocol>gs</protocol>
    </profile>
    <!-- AVRO PROFILES -->
    <profile>
        <name>Avro</name>
        <description>This profile is suitable for using when reading Avro files (i.e
            fileName.avro)
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.AvroFileAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.AvroResolver</resolver>
        </plugins>
    </profile>
    <profile>
        <name>hdfs:avro</name>
        <description>This profile is suitable for using when reading Avro files (i.e
            fileName.avro)
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.AvroFileAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.AvroResolver</resolver>
        </plugins>
    </profile>
    <profile>
        <name>s3:avro</name>
        <description>This profile is suitable for using when reading Avro files (i.e
            fileName.avro)
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.AvroFileAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.AvroResolver</resolver>
        </plugins>
        <protocol>s3a</protocol>
        <optionMappings>
            <mapping option="accesskey" property="fs.s3a.access.key"/>
            <mapping option="secretkey" property="fs.s3a.secret.key"/>
        </optionMappings>
    </profile>
    <profile>
        <name>adl:avro</name>
        <description>This profile is suitable for using when reading Avro files (i.e
            fileName.avro)
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.AvroFileAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.AvroResolver</resolver>
        </plugins>
        <protocol>adl</protocol>
    </profile>
    <profile>
        <name>gs:avro</name>
        <description>This profile is suitable for using when reading Avro files (i.e
            fileName.avro)
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.AvroFileAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.AvroResolver</resolver>
        </plugins>
        <protocol>gs</protocol>
    </profile>
    <!-- JSON PROFILES -->
    <profile>
        <name>hdfs:json</name>
        <description>
            Access JSON data either as:
            * one JSON record per line (default)
            * or multiline JSON records with an IDENTIFIER parameter indicating a member name used
            to determine the encapsulating json object to return
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.json.JsonAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.json.JsonResolver</resolver>
        </plugins>
    </profile>
    <profile>
        <name>s3:json</name>
        <description>
            Access JSON data either as:
            * one JSON record per line (default)
            * or multiline JSON records with an IDENTIFIER parameter indicating a member name used
            to determine the encapsulating json object to return
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.json.JsonAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.json.JsonResolver</resolver>
        </plugins>
        <protocol>s3a</protocol>
        <handler>org.greenplum.pxf.plugins.s3.S3ProtocolHandler</handler>
        <optionMappings>
            <mapping option="accesskey" property="fs.s3a.access.key"/>
            <mapping option="secretkey" property="fs.s3a.secret.key"/>
        </optionMappings>
    </profile>
    <profile>
        <name>adl:json</name>
        <description>
            Access JSON data either as:
            * one JSON record per line (default)
            * or multiline JSON records with an IDENTIFIER parameter indicating a member name used
            to determine the encapsulating json object to return
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.json.JsonAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.json.JsonResolver</resolver>
        </plugins>
        <protocol>adl</protocol>
    </profile>
    <profile>
        <name>gs:json</name>
        <description>
            Access JSON data either as:
            * one JSON record per line (default)
            * or multiline JSON records with an IDENTIFIER parameter indicating a member name used
            to determine the encapsulating json object to return
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.json.JsonAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.json.JsonResolver</resolver>
        </plugins>
        <protocol>gs</protocol>
    </profile>
    <!-- AVRO SEQUENCEFILE PROFILES -->
    <profile>
        <name>hdfs:AvroSequenceFile</name>
        <description>
            Read an Avro format stored in sequence file, with separated schema file
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.SequenceFileAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.AvroResolver</resolver>
        </plugins>
    </profile>
    <profile>
        <name>s3:AvroSequenceFile</name>
        <description>
            Read an Avro format stored in sequence file, with separated schema file from S3
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.SequenceFileAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.AvroResolver</resolver>
        </plugins>
        <protocol>s3a</protocol>
        <optionMappings>
            <mapping option="accesskey" property="fs.s3a.access.key"/>
            <mapping option="secretkey" property="fs.s3a.secret.key"/>
        </optionMappings>
    </profile>
    <profile>
        <name>adl:AvroSequenceFile</name>
        <description>
            Read an Avro format stored in sequence file, with separated schema file from Azure Data
            Lake
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.SequenceFileAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.AvroResolver</resolver>
        </plugins>
        <protocol>adl</protocol>
    </profile>
    <profile>
        <name>gs:AvroSequenceFile</name>
        <description>
            Read an Avro format stored in sequence file, with separated schema file from Google
            Cloud Storage
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.SequenceFileAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.AvroResolver</resolver>
        </plugins>
        <protocol>gs</protocol>
    </profile>
    <!-- SEQUENCEFILE PROFILES -->
    <profile>
        <name>hdfs:SequenceFile</name>
        <description>
            Profile for accessing Sequence files serialized with a custom Writable class
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.SequenceFileAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.WritableResolver</resolver>
        </plugins>
    </profile>
    <profile>
        <name>s3:SequenceFile</name>
        <description>
            Profile for accessing Sequence files serialized with a custom Writable class
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.SequenceFileAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.WritableResolver</resolver>
        </plugins>
        <protocol>s3a</protocol>
        <optionMappings>
            <mapping option="accesskey" property="fs.s3a.access.key"/>
            <mapping option="secretkey" property="fs.s3a.secret.key"/>
        </optionMappings>
    </profile>
    <profile>
        <name>adl:SequenceFile</name>
        <description>
            Profile for accessing Sequence files serialized with a custom Writable class
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.SequenceFileAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.WritableResolver</resolver>
        </plugins>
        <protocol>adl</protocol>
    </profile>
    <profile>
        <name>gs:SequenceFile</name>
        <description>
            Profile for accessing Sequence files serialized with a custom Writable class
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.SequenceFileAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.WritableResolver</resolver>
        </plugins>
        <protocol>gs</protocol>
    </profile>

    <!-- WASBS - Azure Blob Storage -->
    <profile>
        <name>wasbs:text</name>
        <description>This profile is suitable for using when reading delimited single line records
            from plain text, tab-delimited, files on Azure Blob Storage
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.LineBreakAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.StringPassResolver</resolver>
        </plugins>
        <protocol>wasbs</protocol>
    </profile>
    <profile>
        <name>wasbs:csv</name>
        <description>This profile is suitable for using when reading delimited single line records
            from plain text CSV files on Azure Blob Storage
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.LineBreakAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.StringPassResolver</resolver>
        </plugins>
        <protocol>wasbs</protocol>
    </profile>
    <profile>
        <name>wasbs:text:multi</name>
        <description>This profile is suitable for using when reading delimited single or multi line
            records (with quoted linefeeds) from plain text files on Azure Blob Storage. It is not
            splittable (non parallel) and slower than HdfsTextSimple.
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsFileFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.QuotedLineBreakAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.StringPassResolver</resolver>
        </plugins>
        <protocol>wasbs</protocol>
    </profile>
    <profile>
        <name>wasbs:parquet</name>
        <description>A profile for reading and writing Parquet data from Azure Blob Storage
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.ParquetFileAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.ParquetResolver</resolver>
        </plugins>
        <protocol>wasbs</protocol>
    </profile>
    <profile>
        <name>wasbs:avro</name>
        <description>This profile is suitable for using when reading Avro files (i.e
            fileName.avro)
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.AvroFileAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.AvroResolver</resolver>
        </plugins>
        <protocol>wasbs</protocol>
    </profile>
    <profile>
        <name>wasbs:json</name>
        <description>
            Access JSON data either as:
            * one JSON record per line (default)
            * or multiline JSON records with an IDENTIFIER parameter indicating a member name used
            to determine the encapsulating json object to return
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.json.JsonAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.json.JsonResolver</resolver>
        </plugins>
        <protocol>wasbs</protocol>
    </profile>
    <profile>
        <name>wasbs:AvroSequenceFile</name>
        <description>
            Read an Avro format stored in sequence file, with separated schema file from Azure Blob
            Storage
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.SequenceFileAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.AvroResolver</resolver>
        </plugins>
        <protocol>wasbs</protocol>
    </profile>
    <profile>
        <name>wasbs:SequenceFile</name>
        <description>
            Profile for accessing Sequence files serialized with a custom Writable class
        </description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.HdfsDataFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.SequenceFileAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.WritableResolver</resolver>
        </plugins>
        <protocol>wasbs</protocol>
    </profile>
    <!-- IMAGE PROFILES -->
    <profile>
        <name>hdfs:image</name>
        <description>This profile is suitable for using when reading image files from HDFS</description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.BatchHdfsFileFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.StreamingImageAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.StreamingImageResolver</resolver>
        </plugins>
        <handler>org.greenplum.pxf.plugins.hdfs.StreamingFragmenterHandler</handler>
    </profile>
    <profile>
        <name>gs:image</name>
        <description>This profile is suitable for using when reading image files from GCS</description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.BatchHdfsFileFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.StreamingImageAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.StreamingImageResolver</resolver>
        </plugins>
        <protocol>gs</protocol>
        <handler>org.greenplum.pxf.plugins.hdfs.StreamingFragmenterHandler</handler>
    </profile>
    <profile>
        <name>adl:image</name>
        <description>This profile is suitable for using when reading image files from Azure Data Lake</description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.BatchHdfsFileFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.StreamingImageAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.StreamingImageResolver</resolver>
        </plugins>
        <protocol>adl</protocol>
        <handler>org.greenplum.pxf.plugins.hdfs.StreamingFragmenterHandler</handler>
    </profile>
    <profile>
        <name>s3:image</name>
        <description>This profile is suitable for using when reading image files from Amazon S3</description>
        <plugins>
            <fragmenter>org.greenplum.pxf.plugins.hdfs.BatchHdfsFileFragmenter</fragmenter>
            <accessor>org.greenplum.pxf.plugins.hdfs.StreamingImageAccessor</accessor>
            <resolver>org.greenplum.pxf.plugins.hdfs.StreamingImageResolver</resolver>
        </plugins>
        <protocol>s3a</protocol>
        <handler>org.greenplum.pxf.plugins.hdfs.StreamingFragmenterHandler</handler>
        <optionMappings>
            <mapping option="accesskey" property="fs.s3a.access.key"/>
            <mapping option="secretkey" property="fs.s3a.secret.key"/>
        </optionMappings>
    </profile>
</profiles>
